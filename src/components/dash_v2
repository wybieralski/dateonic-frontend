import React, { useState } from 'react';
import {
  Upload, Database, Webhook, Home, BarChart2, Settings, Users, HelpCircle
} from 'lucide-react';
import {
  LineChart, Line,
  BarChart, Bar,
  PieChart, Pie, Cell,
  XAxis, YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend
} from 'recharts';
import logo from './Dateonic_logo.png';

const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff8042', '#a4de6c'];

const ChartComponent = ({ chart }) => {
  switch (chart.type) {
    case 'line':
      return (
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={chart.data}>
            <CartesianGrid strokeDasharray="3 3" opacity={0.1} />
            <XAxis dataKey={chart.data_columns[0]} />
            <YAxis />
            <Tooltip />
            <Legend />
            {chart.data_columns.slice(1).map((column, i) => (
              <Line
                key={column}
                type="monotone"
                dataKey={column}
                stroke={COLORS[i % COLORS.length]}
                strokeWidth={2}
              />
            ))}
          </LineChart>
        </ResponsiveContainer>
      );

    case 'bar':
      return (
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={chart.data}>
            <CartesianGrid strokeDasharray="3 3" opacity={0.1} />
            <XAxis dataKey={chart.data_columns[0]} />
            <YAxis />
            <Tooltip />
            <Legend />
            {chart.data_columns.slice(1).map((column, i) => (
              <Bar
                key={column}
                dataKey={column}
                fill={COLORS[i % COLORS.length]}
              />
            ))}
          </BarChart>
        </ResponsiveContainer>
      );

    case 'pie':
      return (
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={chart.data}
              cx="50%"
              cy="50%"
              labelLine={true}
              label={({name, percent}) => `${name} (${(percent * 100).toFixed(0)}%)`}
              outerRadius={80}
              dataKey="value"
            >
              {chart.data.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
              ))}
            </Pie>
            <Tooltip />
            <Legend />
          </PieChart>
        </ResponsiveContainer>
      );

    default:
      return null;
  }
};

const Dashboard = () => {
  const [loading, setLoading] = useState(false);
  const [analysis, setAnalysis] = useState(null);

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setLoading(true);
    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await fetch('http://localhost:8000/api/analyze', {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();
      console.log('API Response:', data);
      setAnalysis(data);
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleOptionClick = (option) => {
    document.getElementById('fileInput').click();
  };

  return (
    <div className="min-h-screen flex bg-gray-50">
      <input
        type="file"
        id="fileInput"
        accept=".csv,.xlsx,.xls"
        className="hidden"
        onChange={handleFileUpload}
      />

      {/* Sidebar */}
      <div className="w-52 bg-white border-r border-gray-200 min-h-screen flex flex-col">
        <div className="p-4 border-b border-gray-200">
              <img
                src={logo}
                alt="Company Logo"
                className="h-6 object-contain"
              />
            </div>

        <nav className="p-2 flex-1">
          <div className="space-y-1">
            <div className="flex items-center text-sm space-x-3 p-2 text-gray-600 hover:bg-blue-50 hover:text-blue-600 rounded-md cursor-pointer transition-colors">
              <Home size={18} />
              <span className="font-medium">Dashboard</span>
            </div>
            <div className="flex items-center text-sm space-x-3 p-2 text-gray-600 hover:bg-blue-50 hover:text-blue-600 rounded-md cursor-pointer transition-colors">
              <BarChart2 size={18} />
              <span className="font-medium">Analytics</span>
            </div>
            <div className="flex items-center text-sm space-x-3 p-2 text-gray-600 hover:bg-blue-50 hover:text-blue-600 rounded-md cursor-pointer transition-colors">
              <Users size={18} />
              <span className="font-medium">Team</span>
            </div>
          </div>

          <div className="mt-8 pt-4 border-t border-gray-100">
            <div className="space-y-1">
              <div className="flex items-center text-sm space-x-3 p-2 text-gray-600 hover:bg-blue-50 hover:text-blue-600 rounded-md cursor-pointer transition-colors">
                <Settings size={18} />
                <span className="font-medium">Settings</span>
              </div>
              <div className="flex items-center text-sm space-x-3 p-2 text-gray-600 hover:bg-blue-50 hover:text-blue-600 rounded-md cursor-pointer transition-colors">
                <HelpCircle size={18} />
                <span className="font-medium">Help</span>
              </div>
            </div>
          </div>
        </nav>
      </div>

      {/* Main Content */}
      <div className="flex-1 p-6">
        <h1 className="text-2xl font-bold mb-8 text-gray-800">Import Data</h1>

        {!analysis && (
          <div className="space-y-4 max-w-xl">
            <div
              className="p-6 bg-white rounded-lg shadow hover:shadow-lg transition-all duration-300 cursor-pointer"
              onClick={() => handleOptionClick('upload')}
            >
              <div className="flex items-center space-x-4">
                <div className="h-14 w-14 rounded-full bg-blue-100 flex items-center justify-center group-hover:bg-blue-200 transition-colors">
                  <Upload className="h-6 w-6 text-blue-600" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold mb-1">Upload Files</h3>
                  <p className="text-sm text-gray-600">
                    Drag and drop your data files or click to browse
                  </p>
                </div>
              </div>
            </div>

            <div
              className="p-6 bg-white rounded-lg shadow hover:shadow-lg transition-all duration-300 cursor-pointer"
              onClick={() => handleOptionClick('api')}
            >
              <div className="flex items-center space-x-4">
                <div className="h-14 w-14 rounded-full bg-green-100 flex items-center justify-center group-hover:bg-green-200 transition-colors">
                  <Webhook className="h-6 w-6 text-green-600" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold mb-1">Connect with API</h3>
                  <p className="text-sm text-gray-600">
                    Connect your data source via API
                  </p>
                </div>
              </div>
            </div>

            <div
              className="p-6 bg-white rounded-lg shadow hover:shadow-lg transition-all duration-300 cursor-pointer"
              onClick={() => handleOptionClick('database')}
            >
              <div className="flex items-center space-x-4">
                <div className="h-14 w-14 rounded-full bg-purple-100 flex items-center justify-center group-hover:bg-purple-200 transition-colors">
                  <Database className="h-6 w-6 text-purple-600" />
                </div>
                <div>
                  <h3 className="text-lg font-semibold mb-1">Connect Database</h3>
                  <p className="text-sm text-gray-600">
                    Connect directly to your database
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {loading && (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        )}

        {/* Analysis Results */}
        {analysis && (
          <div className="space-y-6">
            {/* Key Insights */}
            <div className="bg-white rounded-lg shadow-sm p-4">
              <h2 className="text-lg font-semibold mb-4">Key Insights</h2>
              <ul className="list-disc pl-4 space-y-2">
                {analysis.key_insights.map((insight, index) => (
                  <li key={index} className="text-gray-700">{insight}</li>
                ))}
              </ul>
            </div>

            {/* Charts */}
            <div className="grid grid-cols-2 gap-6">
              {analysis.suggested_charts.map((chart, index) => (
                <div key={index} className="bg-white rounded-lg shadow-sm p-4">
                  <h3 className="text-lg font-semibold mb-2">{chart.title}</h3>
                  <p className="text-gray-600 text-sm mb-4">{chart.description}</p>
                  <div className="h-80">
                    <ChartComponent chart={chart} />
                  </div>
                </div>
              ))}
            </div>

            {/* Additional Analysis */}
            <div className="bg-white rounded-lg shadow-sm p-4">
              <h2 className="text-lg font-semibold mb-4">Suggested Additional Analysis</h2>
              <ul className="list-disc pl-4 space-y-2">
                {analysis.additional_analysis_suggested.map((suggestion, index) => (
                  <li key={index} className="text-gray-700">{suggestion}</li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;